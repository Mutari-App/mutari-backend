"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","AuthGuard","","","","","should throw UnauthorizedException if token is invalid",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","5","NotificationService","calculateScheduleDate","","","","should throw BadRequestException on improper reminder option",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","2","TicketService","findAll","","","","should return a string indicating all tickets are returned",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","21","AuthGuard","","","","","should be defined",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","GeminiService","createPrompt","","","","should handle missing description",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","2","MeilisearchService","formatItineraryForIndex","","","","should handle missing fields gracefully",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","6","GeminiService","generateFeedback","","","","should throw InternalServerErrorException on AI error",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","4","ProfileService","getListItineraryLikes","","","","should return a list of liked itineraries for a user",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","4","AuthController","login","","","","should throw UnauthorizedException if password is incorrect",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","MeilisearchService","searchItineraries","","","","should add isPublished filter when no other filters",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","2","MeilisearchController","syncItineraries","","","","should sync itineraries when provided with valid API key",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","2","MapService","getPlaceDetails","","","","should throw an error when API call fails",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","0","PaginationDto","","","","","should allow page to be optional",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","6","NotificationService","cancelScheduledEmail","","","","should throw a NotFoundException if job doesnt exist",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","3","NotificationService","scheduleEmail","","","","should schedule a sendEmail job and verify it runs",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","16","AuthService","refreshToken","","","","should return new access and refresh tokens if refresh token is valid",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","16","AuthService","clearExpiredRefreshTokens","","","","should delete expired refresh tokens",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","10","AuthService","refreshToken","","","","should throw UnauthorizedException if refresh token is blacklisted",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","TicketController","create","","","","should create a ticket",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","6","PreRegisterService","validateLogin","","","","should throw UnauthorizedException for invalid ticket",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","12","PreRegisterService","sendDiscordWebhook","","","","should send webhook for login-validation",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","NotificationController","updateAndReschedule","","","","should update an itinerary reminder and reschdule the cron job",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","AuthService","register","","","","should throw BadRequestException if passwords do not match",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","4","AuthService","createUser","","","","should throw BadRequestException if user was created recently and is not confirmed",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","AuthGuard","","","","","should allow access if the route is public",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","1","PaymentService","remove","","","","should return a string indicating a payment was removed",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","25","AuthController","login","","","","should return access and refresh tokens on successful login",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","2","TicketService","findOne","","","","should return a string with the ticket id",""
"passed","Sun Apr 27 15:42:38 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","73","AuthService","login","","","","should throw UnauthorizedException if user is not found",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","4","NotificationService","remove","","","","should remove an itinerary reminder",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","2","AuthGuard","","","","","should throw UnauthorizedException if user not found",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","RefreshStrategy","","","","","should extract refresh token from cookies",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","MapService","getPriceRangeByPlaceId","","","","should handle missing price range data",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","15","PreRegisterService","createPreRegister","","","","should throw BadRequestException if email is already registered",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","MeilisearchService","addOrUpdateItinerary","","","","should delete an unpublished itinerary from the index",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","MeilisearchService","deleteItinerary","","","","should throw other errors",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","13","StaticService","","","","","should be defined",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","GeminiService","createPrompt","","","","should handle empty sections",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","5","NotificationController","createAndSchedule","","","","should create an itinerary reminder and schedule the cron job",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","73","NotificationService","","","","","should be defined",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","5","AuthService","createUser","","","","should create a new user if user does not exist",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","5","AuthController","login","","","","should throw UnauthorizedException if email is not registered",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","ProfileService","getListItineraryLikes","","","","should handle user with no liked itineraries",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","4","PreRegisterService","login","","","","should send login email if user exists",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","3","EmailService","","","","","should handle errors if sending email fails",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","PreRegisterController","preRegister","","","","should call service.createPreRegister with correct data",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","4","AuthService","verify","","","","should throw NotFoundException if verification code is not found",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","2","MeilisearchController","syncItineraries","","","","should handle service errors properly",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","AuthController","register","","","","should call authService.register with correct data",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","2","StaticService","_getCountryCode","","","","should return country details based on placeId",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","RefreshStrategy","","","","","should validate user if refresh token is valid",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","5","ProfileController","getListItineraryLikes","","","","should return empty array when user has no itinerary likes",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","4","AuthController","getme","","","","should return the authenticated user",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","22","MapController","","","","","should return place details when placeId is valid",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","2","MeilisearchService","deleteItinerary","","","","should handle document not found gracefully",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","3","NotificationService","remove","","","","should throw NotFoundException if itinerary doesnt exist",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","2","PaymentService","create","","","","should return a string indicating a new payment was added",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","9","PaymentService","update","","","","should return a string indicating a payment was updated",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","PreRegisterController","login","","","","should call service.login with the correct email",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","2","MeilisearchService","syncItineraries","","","","should not index if no published itineraries",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","2","TicketService","update","","","","should return a string with the updated ticket id",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","4","NotificationService","calculateScheduleDate","","","","should calculate scheduled date correctly",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","3","EmailService","","","","","should send an email successfully",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","UmamiService","getUmamiAnalytics","","","","should handle fetch errors gracefully",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","StaticService","searchCities","","","","should return list of cities based on country",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","2","ProfileController","getListItineraries","","","","should return itineraries when getListItineraries is called with a valid ID",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","PaymentController","findOne","","","","should return a single payment",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","6","ProfileController","getListItineraryLikes","","","","should return itinerary likes when getListItineraryLikes is called with a valid ID",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","5","AuthService","sendVerification","","","","should delete the oldest ticket if there are too many",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","2","MapService","getPlaceDetails","","","","should return place details with price range when successful",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","5","ProfileService","findOne","","","","should throw NotFoundException if user is not found",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","5","MeilisearchService","addOrUpdateItinerary","","","","should handle undefined itinerary gracefully",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","26","ProfileService","","","","","should be defined",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","AuthController","createUser","","","","should call authService.createUser and authService.sendVerification with correct data",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","25","TicketService","","","","","should be defined",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","TicketController","findAll","","","","should return array of tickets",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","6","PaymentService","","","","","should be defined",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","5","AppController","root","","","","should return ""Hello World!""",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","38","PreRegisterService","","","","","should be defined",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","7","PreRegisterService","getPreRegisterCount","","","","should return total pre-registered users count",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","2","NotificationService","cancelScheduledEmail","","","","should cancel an existing scheduled email job",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","2","ProfileService","getListItineraries","","","","should correctly calculate totalDestinations when sections is empty",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","4","GeminiService","createPrompt","","","","should create a properly formatted prompt with all data types",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","2","StaticController","getCities","","","","should return list of cities",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","12","RefreshStrategy","","","","","should be defined",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","10","StaticController","","","","","should be defined",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","3","NotificationService","findOne","","","","should return an itinerary reminder with associated itinerary id",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","5","NotificationService","create","","","","should throw ConflictException if itinerary reminder already exist",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","2","TicketController","update","","","","should update a ticket",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","2","PaymentService","findOne","","","","should return a string indicating a specific payment was returned",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","42","PreRegisterService","createPreRegister","","","","should create a new user and send confirmation email",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","22","UmamiService","","","","","should be defined",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","5","GeminiService","generateFeedback","","","","should return parsed feedback array from AI response",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","2","PaginationDto","","","","","should transform page to a number",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","4","GeminiController","","","","","should throw an error if itineraryData.sections is empty",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","5","MeilisearchService","searchItineraries","","","","should search itineraries with the provided query and options",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","3","NotificationService","update","","","","should throw NotFoundException if itinerary reminder does not exist",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","MapService","getPriceRangeByPlaceId","","","","should throw an error if placeId is not provided",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","4","AuthController","refreshToken","","","","should return new access and refresh tokens",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","5","UmamiService","","","","","should log an error and return if UMAMI_DISCORD_WEBHOOK_URL is not set",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","7","NotificationService","findOne","","","","should throw NotFoundException if associated itinerary's reminder does not exist",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","ProfileController","findOne","","","","should return a profile when findOne is called with a valid ID",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","2","MeilisearchService","syncItineraries","","","","should fetch published itineraries and index them",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","ProfileService","getListItineraryLikes","","","","should correctly calculate totalDestinations when sections is empty",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","6","NotificationService","_formatReminderOption","","","","should return ""tidak diketahui"" for unknown option",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","2","PaginationDto","","","","","should return validation error if page is negative",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","148","AuthService","register","","","","should throw NotFoundException if user is not found",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","6","PreRegisterService","sendDiscordWebhook","","","","should handle errors if fetch fails",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","2","PaymentController","findAll","","","","should return an array of payments",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","5","AuthGuard","","","","","should throw UnauthorizedException if token is not provided",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","2","MeilisearchService","formatItineraryForIndex","","","","should handle null or undefined itinerary and return null",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","PreRegisterService","_generateTicket","","","","should throw BadRequestException if last ticket is still valid",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","2","TicketController","remove","","","","should remove a ticket",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","4","UmamiService","getUmamiAnalytics","","","","should fetch analytics data and send to Discord",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","6","NotificationService","_formatReminderOption","","","","should return ""10 menit"" for TEN_MINUTES_BEFORE option",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","MeilisearchController","syncItineraries","","","","should throw UnauthorizedException when API key is missing",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","4","AuthService","sendVerification","","","","should send verification email if user exists",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","2","MeilisearchService","setupIndexes","","","","should not create index if it already exists",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","16","GeminiService","","","","","should be defined",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","8","MapController","","","","","should handle service errors properly",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","5","NotificationService","_formatReminderOption","","","","should return ""1 jam"" for ONE_HOUR_BEFORE option",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","StaticController","getCountries","","","","should return list of countries",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","28","NotificationService","scheduleEmail","","","","should throw a BadRequestException on jobs with date in past",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","18","PreRegisterService","sendDiscordWebhook","","","","should not send webhook if DISCORD_WEBHOOK_URL is not set",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","7","ProfileController","getListItineraries","","","","should return empty array when user has no itineraries",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","2","MeilisearchService","deleteItinerary","","","","should delete an itinerary from the index",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","NotificationController","findOne","","","","should fetch an itinerary reminder and return OK when found",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","9","EmailService","","","","","should be defined",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","2","MapService","getPriceRangeByPlaceId","","","","should return price range when API call is successful",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","4","NotificationService","scheduleEmail","","","","should throw a ConflictException on already scheduled reminders",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","1","PaymentService","findAll","","","","should return a string indicating all payments were returned",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","4","GeminiService","generateFeedback","","","","should parse JSON even if AI returns extra text",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","18","GeminiController","","","","","should be defined",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","4","PreRegisterService","login","","","","should throw BadRequestException if email is not registered",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","4","AuthService","verify","","","","should throw UnauthorizedException if emails do not match",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","2","ProfileService","findOne","","","","should calculate totalLikes from itineraries correctly",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","2","MeilisearchService","calculateDaysCount","","","","should return 0 for empty sections",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","2","StaticController","getCountryCode","","","","should return country code",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","PaymentController","remove","","","","should remove a payment",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","15","PreRegisterService","_generateTicket","","","","should create a new ticket for the user",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","12","UmamiService","sendToDiscord","","","","should handle Discord webhook errors gracefully",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","4","AuthService","sendVerification","","","","should throw BadRequestException if user does not exist",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","2","GeminiService","createPrompt","","","","should format dates according to Indonesian time format",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","PreRegisterController","validateLogin","","","","should call service.validateLogin with correct ticketId",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","9","AuthService","login","","","","should throw UnauthorizedException if password is invalid",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","AuthService","verify","","","","should throw UnauthorizedException if firstNames do not match",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","9","MeilisearchService","addOrUpdateItinerary","","","","should add a published itinerary to the index",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","29","MeilisearchService","","","","","should be defined",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","3","NotificationService","findAll","","","","should return an empty array of itinerary reminders if none found",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","14","AuthService","register","","","","should update user and send registration email if verification is successful",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","4","AuthController","verify","","","","should call authService.verify with correct data",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","AuthController","refreshToken","","","","should throw UnauthorizedException if refresh token is invalid",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","5","NotificationService","_formatReminderOption","","","","should return ""1 hari"" for ONE_DAY_BEFORE option",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","StaticService","searchCountries","","","","should return list of countries",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","4","MeilisearchService","formatItineraryForIndex","","","","should correctly format an itinerary for indexing",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","11","PreRegisterService","validateLogin","","","","should validate login ticket and return access token",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","MeilisearchService","calculateDaysCount","","","","should calculate days count from highest section number",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","1","MapService","getPriceRangeByPlaceId","","","","should throw an error when API call fails",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","4","ProfileService","findOne","","","","should return a user profile by id",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","PreRegisterController","referralCode","","","","should call service.getReferralCode with the correct userId",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","10","MapService","getPlaceDetails","","","","should throw an error if placeId is not provided",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","48","PreRegisterController","","","","","should be defined",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","AuthGuard","","","","","should throw UnauthorizedException if token has expired",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","3","TicketService","remove","","","","should return a string with the removed ticket id",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","17","PaymentController","","","","","should be defined",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","13","NotificationService","create","","","","should throw NotFoundException if itinerary doesnt exist",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","MeilisearchService","onModuleInit","","","","should call setupIndexes on module init",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","MapController","","","","","should throw an error if placeId is not provided",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","NotificationController","findOne","","","","should pass errors from service to the caller",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","16","NotificationService","create","","","","should create an itinerary reminder",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","4","NotificationService","update","","","","should update an itinerary reminder",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","PreRegisterService","validateLogin","","","","should throw UnauthorizedException if ticket is expired",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","PreRegisterController","getPreRegisterCount","","","","should return the pre-register count",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","20","MeilisearchController","syncItineraries","","","","should throw UnauthorizedException when provided with invalid API key",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","20","NotificationService","onModuleInit","","","","should reschedule itinerary reminders on server restart",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","2","ProfileService","getListItineraries","","","","should handle user with no itineraries",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","MeilisearchService","setupIndexes","","","","should create index if it does not exist",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","PaymentController","update","","","","should update a payment",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","15","PreRegisterService","_generateTicket","","","","should delete the oldest ticket if more than 5 exist",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","6","AuthService","createUser","","","","should throw ConflictException if user already exists and is confirmed",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","2","AuthGuard","","","","","should allow access if token is valid",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","4","UmamiService","_getPreviousMonthRange","","","","should return the correct start and end timestamps for the previous month",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","2","PaymentController","create","","","","should create a payment",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","3","TicketController","findOne","","","","should return a single ticket",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","19","ProfileController","","","","","should be defined",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","12","MeilisearchController","","","","","should be defined",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","5","RefreshStrategy","","","","","should throw UnauthorizedException if user not found",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","4","ProfileService","getListItineraries","","","","should return a list of itineraries for a user",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","3","NotificationService","findAll","","","","should return an array of itinerary reminders",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","2","NotificationController","removeAndCancel","","","","should remove an itinerary reminder and cancel the cron job",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","9","PreRegisterService","createPreRegister","","","","should throw NotFoundException if referral code is not found",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","3","AuthController","logout","","","","should clear refreshToken cookie",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","4","AuthService","sendVerification","","","","should throw BadRequestException if requesting too fast",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","2","UmamiService","getUmamiAnalytics","","","","should return 401 Unauthorized if UMAMI_API_KEY is not set",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","ProfileService","findOne","","","","should handle user with no itineraries",""
"passed","Sun Apr 27 15:42:42 GMT 2025","Sun Apr 27 15:42:42 GMT 2025","3","TicketService","create","","","","should return a string indicating a new ticket was added",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","22","TicketController","","","","","should be defined",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","4","GeminiController","","","","","should call geminiService.generateFeedback with valid dto",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","16","PreRegisterService","sendDiscordWebhook","","","","should send webhook for pre-registration",""
"passed","Sun Apr 27 15:42:41 GMT 2025","Sun Apr 27 15:42:41 GMT 2025","2","StaticService","getCountryCode","","","","should return country code response",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","37","NotificationController","","","","","should be defined",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","15","AuthService","login","","","","should return access and refresh tokens if login is successful",""
"passed","Sun Apr 27 15:42:37 GMT 2025","Sun Apr 27 15:42:37 GMT 2025","3","NotificationService","update","","","","should throw NotFoundException if itinerary doesnt exist",""
"passed","Sun Apr 27 15:42:40 GMT 2025","Sun Apr 27 15:42:40 GMT 2025","2","UmamiService","sendToDiscord","","","","should send analytics data to Discord",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","6","PreRegisterService","getReferralCode","","","","should return user referral code and count",""
"passed","Sun Apr 27 15:42:39 GMT 2025","Sun Apr 27 15:42:39 GMT 2025","3","PreRegisterService","getReferralCode","","","","should throw BadRequestException if user is not found",""
