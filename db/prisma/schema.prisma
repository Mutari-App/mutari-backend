//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DURATION_TYPE {
  HOUR
  DAY
}

enum TICKET_STATUS {
  PENDING
  CONFIRMED
  CANCELED
}

enum PAYMENT_STATUS {
  UNPAID
  PAID
  REFUNDED
}

enum TITLE {
  MR
  MRS
  MS
}

enum BLOCK_TYPE {
  LOCATION
  NOTE
}

enum REMINDER_OPTION {
  NONE
  TEN_MINUTES_BEFORE
  ONE_HOUR_BEFORE
  ONE_DAY_BEFORE
}

model User {
  updatedAt        DateTime          @updatedAt() @db.Timestamptz()
  createdAt        DateTime          @default(now()) @db.Timestamptz()
  id               String            @id() @unique() @default(uuid())
  firstName        String
  lastName         String?
  email            String            @unique()
  phoneNumber      String?
  password         String?
  photoProfile     String?
  referralCode     String?           @unique()
  isEmailConfirmed Boolean           @default(false)
  referredById     String?
  loyaltyPoints    Int               @default(0)
  birthDate        DateTime?         @db.Date()
  referredBy       User?             @relation("Referral", fields: [referredById], references: [id])
  referrals        User[]            @relation("Referral")
  tickets          Ticket[]
  tokens           Token[]
  refreshTokens    RefreshToken[]
  itineraries      Itinerary[]
  itineraryAccess  ItineraryAccess[]
  itineraryLikes   ItineraryLike[]
  tourTickets      TourTicket[]
}

model Ticket {
  updatedAt  DateTime @updatedAt() @db.Timestamptz()
  createdAt  DateTime @default(now()) @db.Timestamptz()
  id         String   @id() @unique() @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  uniqueCode String?  @unique()
}

model Token {
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  createdAt DateTime @default(now()) @db.Timestamptz()
  id        String   @id() @unique() @default(uuid())
  token     String   @unique()
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  createdAt DateTime @default(now()) @db.Timestamptz()
  id        String   @id() @unique() @default(uuid())
  token     String   @unique()
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model Tour {
  updatedAt      DateTime       @updatedAt() @db.Timestamptz()
  createdAt      DateTime       @default(now()) @db.Timestamptz()
  id             String         @id() @unique() @default(uuid())
  title          String
  coverImage     String?
  maxCapacity    Int
  description    String?
  location       String
  pricePerTicket Decimal
  duration       Int
  durationType   DURATION_TYPE
  itineraryId    String
  itinerary      Itinerary      @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  includes       TourIncludes[]
  tickets        TourTicket[]
}

model TourIncludes {
  id     String @id() @unique() @default(uuid())
  tourId String
  icon   String
  text   String
  tour   Tour   @relation(fields: [tourId], references: [id], onDelete: Cascade)
}

model TourTicket {
  updatedAt     DateTime          @updatedAt() @db.Timestamptz()
  createdAt     DateTime          @default(now()) @db.Timestamptz()
  id            String            @id() @unique() @default(uuid())
  userId        String
  tourId        String
  quantity      Int
  totalPrice    Decimal
  status        TICKET_STATUS     @default(PENDING)
  paymentStatus PAYMENT_STATUS    @default(UNPAID)
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tour          Tour              @relation(fields: [tourId], references: [id], onDelete: Cascade)
  guests        TourTicketGuest[]
}

model TourTicketGuest {
  id           String     @id() @unique() @default(uuid())
  tourTicketId String
  title        TITLE
  firstName    String
  lastName     String
  phoneNumber  String
  email        String
  tourTicket   TourTicket @relation(fields: [tourTicketId], references: [id], onDelete: Cascade)
}

model Itinerary {
  updatedAt        DateTime                 @updatedAt() @db.Timestamptz()
  createdAt        DateTime                 @default(now()) @db.Timestamptz()
  id               String                   @id() @unique() @default(uuid())
  userId           String
  title            String
  description      String?
  coverImage       String?
  startDate        DateTime                 @db.Timestamptz()
  endDate          DateTime                 @db.Timestamptz()
  isPublished      Boolean                  @default(false)
  isCompleted      Boolean                  @default(false)
  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections         Section[]
  tags             ItineraryTag[]
  access           ItineraryAccess[]
  pendingInvites   PendingItineraryInvite[]
  likes            ItineraryLike[]
  tours            Tour[]
  contingencyPlans ContingencyPlan[]
  reminder         ItineraryReminder?
}

model ContingencyPlan {
  updatedAt   DateTime  @updatedAt() @db.Timestamptz()
  createdAt   DateTime  @default(now()) @db.Timestamptz()
  id          String    @id() @unique() @default(uuid())
  itineraryId String
  title       String
  description String?
  isSelected  Boolean   @default(false)
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  sections    Section[]

  @@unique([itineraryId, title])
}

model Section {
  updatedAt         DateTime         @updatedAt() @db.Timestamptz()
  createdAt         DateTime         @default(now()) @db.Timestamptz()
  id                String           @id() @unique() @default(uuid())
  itineraryId       String
  sectionNumber     Int
  title             String           @default("Hari ke-1")
  contingencyPlanId String?
  itinerary         Itinerary        @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  plan              ContingencyPlan? @relation(fields: [contingencyPlanId], references: [id], onDelete: SetNull)
  blocks            Block[]

  @@unique([itineraryId, sectionNumber])
}

model Block {
  updatedAt         DateTime   @updatedAt() @db.Timestamptz()
  createdAt         DateTime   @default(now()) @db.Timestamptz()
  id                String     @id() @unique() @default(uuid())
  sectionId         String
  position          Int
  blockType         BLOCK_TYPE
  title             String?
  description       String?
  startTime         DateTime?  @db.Timestamptz()
  endTime           DateTime?  @db.Timestamptz()
  location          String?
  price             Int?       @default(0)
  photoUrl          String?
  section           Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  routeToNext       Route?     @relation("SourceBlock")
  routeFromPrevious Route?     @relation("DestinationBlock")

  @@unique([sectionId, position])
}

model Route {
  id                 String   @id() @unique() @default(uuid())
  sourceBlockId      String   @unique()
  destinationBlockId String   @unique()
  distance           Int
  duration           Int
  polyline           String?
  createdAt          DateTime @default(now()) @db.Timestamptz()
  updatedAt          DateTime @updatedAt() @db.Timestamptz()
  sourceBlock        Block    @relation("SourceBlock", fields: [sourceBlockId], references: [id], onDelete: Cascade)
  destinationBlock   Block    @relation("DestinationBlock", fields: [destinationBlockId], references: [id], onDelete: Cascade)
}

model Tag {
  updatedAt     DateTime       @updatedAt() @db.Timestamptz()
  createdAt     DateTime       @default(now()) @db.Timestamptz()
  id            String         @id() @unique() @default(uuid())
  name          String         @unique()
  description   String?
  iconUrl       String?
  itineraryTags ItineraryTag[]
}

model ItineraryTag {
  createdAt   DateTime  @default(now()) @db.Timestamptz()
  id          String    @id() @unique() @default(uuid())
  itineraryId String
  tagId       String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([itineraryId, tagId])
}

model ItineraryAccess {
  createdAt   DateTime  @default(now()) @db.Timestamptz()
  id          String    @id() @unique() @default(uuid())
  itineraryId String
  userId      String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([itineraryId, userId])
}

model PendingItineraryInvite {
  updatedAt   DateTime  @updatedAt() @db.Timestamptz()
  createdAt   DateTime  @default(now()) @db.Timestamptz()
  id          String    @id() @unique() @default(uuid())
  itineraryId String
  email       String    @unique()
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@unique([itineraryId, email])
}

model ItineraryLike {
  createdAt   DateTime  @default(now()) @db.Timestamptz()
  id          String    @id() @unique() @default(uuid())
  itineraryId String
  userId      String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([itineraryId, userId])
}

model ItineraryReminder {
  updatedAt      DateTime        @updatedAt() @db.Timestamptz()
  createdAt      DateTime        @default(now()) @db.Timestamptz()
  id             String          @id() @unique() @default(uuid())
  itineraryId    String          @unique()
  email          String
  recipientName  String?
  tripName       String?
  reminderOption REMINDER_OPTION
  startDate      DateTime        @default(now()) @db.Timestamptz()
  itinerary      Itinerary       @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
}
