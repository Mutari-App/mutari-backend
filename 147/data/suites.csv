"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","createItinerary","","","","should throw NotFoundException when tags do not exist",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","14","PreRegisterController","","","","","should be defined",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","147","AuthService","register","","","","should throw NotFoundException if user is not found",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryController","findMySharedItineraries","","","","should return empty data when there are no shared itineraries",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","9","RefreshStrategy","","","","","should be defined",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","1","MapController","","","","","should handle service errors properly",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","3","AuthService","createUser","","","","should throw ConflictException if user already exists and is confirmed",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","1","StaticController","getCountryCode","","","","should return country code",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","4","GeminiController","","","","","should throw an error if itineraryData.sections is empty",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","2","MapService","","","","","should return place details when API call is successful",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","21","AuthController","login","","","","should return access and refresh tokens on successful login",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","4","AuthService","refreshToken","","","","should return new access and refresh tokens if refresh token is valid",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","findAllMyItineraries","","","","should handle service errors correctly",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","14","PreRegisterService","sendDiscordWebhook","","","","should send webhook for login-validation",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","6","AuthGuard","","","","","should throw UnauthorizedException if user not found",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","10","ItineraryService","removeUserFromItinerary","","","","should throw ForbiddenException if the user is not the owner of the itinerary",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","11","ItineraryService","findMyItineraries","","","","should handle overflow page numbers",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","findAllTags","","","","should return all tags",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","PreRegisterService","getPreRegisterCount","","","","should return total pre-registered users count",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","removeItinerary","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","markAsComplete","","","","should throw ForbiddenException if user is not the owner",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryController","findMyItineraries","","","","should throw an error for invalid page number",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","8","NotificationService","","","","","should be defined",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","removeUserFromItinerary","","","","should throw NotFoundException if the user to be removed does not exist",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryController","removeItinerary","","","","should call remove() in the service and delete an itinerary",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","3","AuthController","getme","","","","should return the authenticated user",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","9","ItineraryService","findMyCompletedItineraries","","","","should return an empty array when there are no completed itineraries",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","3","UmamiService","getUmamiAnalytics","","","","should return 401 Unauthorized if UMAMI_API_KEY is not set",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","4","ItineraryService","acceptItineraryInvitation","","","","should throw NotFoundException if itineraryId is not found when accepting an invitation",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","8","NotificationController","","","","","should be defined",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","_checkUpdateItineraryPermission","","","","should return the itinerary if user is the owner",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","76","ItineraryController","","","","","should be defined",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","PreRegisterService","validateLogin","","","","should throw UnauthorizedException for invalid ticket",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","findMySharedItineraries","","","","should throw an error for invalid page number",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","6","ProfileController","","","","","should be defined",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","2","UmamiService","sendToDiscord","","","","should send analytics data to Discord",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","ItineraryController","createItinerary","","","","should pass errors from service to the caller",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","3","PreRegisterController","preRegister","","","","should call service.createPreRegister with correct data",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","findAllTags","","","","should return an empty array if no tags are found",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryController","removeUserFromItinerary","","","","should throw ForbiddenException if the user is not authorized to remove participants",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","findAllMyItineraries","","","","should return only completed itineraries when finishedBool is true",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","3","PreRegisterController","login","","","","should call service.login with the correct email",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryController","findMyCompletedItineraries","","","","should return empty itinerary array if no completed itineraries found",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","findMyItineraries","","","","should handle negative page numbers",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","4","AuthService","createUser","","","","should create a new user if user does not exist",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryService","createContingencyPlan","","","","should create a contingency plan with sections and blocks",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","9","MapController","","","","","should return place details when placeId is valid",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryController","findOne","","","","should return an itinerary when found",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","31","UmamiService","","","","","should be defined",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","2","UmamiService","_getPreviousMonthRange","","","","should return the correct start and end timestamps for the previous month",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","4","ItineraryController","findOne","","","","should throw ForbiddenException if user is not authorized",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","3","AuthController","logout","","","","should clear refreshToken cookie",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","PreRegisterService","_generateTicket","","","","should throw BadRequestException if last ticket is still valid",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","PreRegisterService","getReferralCode","","","","should return user referral code and count",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","ItineraryService","updateItinerary","","","","should update an itinerary with new details, tags, sections, and blocks",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","7","ItineraryService","acceptItineraryInvitation","","","","should return itineraryId if user already has access to the itinerary",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","PreRegisterService","createPreRegister","","","","should throw NotFoundException if referral code is not found",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","findMyItineraries","","","","should return paginated itineraries",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","21","AuthGuard","","","","","should allow access if token is valid",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","10","StaticController","","","","","should be defined",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryController","updateItinerary","","","","should update an itinerary and return a formatted response",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryService","createItinerary","","","","should throw BadRequestException when duplicate section numbers are provided",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","10","PaginationDto","","","","","should transform page to a number",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","PreRegisterService","_generateTicket","","","","should create a new ticket for the user",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","4","RefreshStrategy","","","","","should throw UnauthorizedException if user not found",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","2","GeminiController","","","","","should call geminiService.generateFeedback with valid dto",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","15","AuthService","sendVerification","","","","should send verification email if user exists",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","3","AuthController","createUser","","","","should call authService.createUser and authService.sendVerification with correct data",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","3","StaticService","_getCountryCode","","","","should return country details based on placeId",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","findMyCompletedItineraries","","","","should return completed itineraries with locationCount",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","5","AuthService","login","","","","should return access and refresh tokens if login is successful",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","createItinerary","","","","should handle optional fields in the DTO correctly",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","findAllMyItineraries","","","","should return only shared itineraries when sharedBool is true",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","2","MapController","","","","","should throw an error if placeId is not provided",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","findMySharedItineraries","","","","should return shared itineraries successfully",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","updateItinerary","","","","should throw BadRequestException when block start time is after end time",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","8","ItineraryService","findAllMyItineraries","","","","should return paginated itineraries for both owned and shared when sharedBool is false",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","findMyCompletedItineraries","","","","should return completed itineraries with response formatting",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","7","PaginationDto","","","","","should return validation error if page is negative",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","4","ItineraryService","createContingencyPlan","","","","should throw ForbiddenException if user does not own the itinerary",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","4","ItineraryService","updateItinerary","","","","should throw BadRequestException when start date is after end date",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","8","ItineraryController","updateItinerary","","","","should pass errors from service to the caller",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryService","inviteToItinerary","","","","should send invitations to the provided emails",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","11","ItineraryService","createItinerary","","","","should create an itinerary with sections and blocks",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","4","PreRegisterController","referralCode","","","","should call service.getReferralCode with the correct userId",""
"passed","Sat Apr 05 18:05:19 GMT 2025","Sat Apr 05 18:05:19 GMT 2025","5","ProfileService","","","","","should be defined",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","updateItinerary","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","3","UmamiService","getUmamiAnalytics","","","","should handle fetch errors gracefully",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","ItineraryService","removeItinerary","","","","should remove an itinerary successfully",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","PreRegisterService","getReferralCode","","","","should throw BadRequestException if user is not found",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","4","ItineraryService","updateItinerary","","","","should update an itinerary with defaults for missing block fields",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","6","GeminiService","generateFeedback","","","","should parse JSON even if AI returns extra text",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","updateItinerary","","","","should throw BadRequestException when duplicate section numbers are provided",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","9","ItineraryController","acceptItineraryInvitation","","","","should throw ForbiddenException if the user is not authorized to accept the invitation",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","PreRegisterService","login","","","","should throw BadRequestException if email is not registered",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","9","UmamiService","getUmamiAnalytics","","","","should fetch analytics data and send to Discord",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","9","AppController","root","","","","should return ""Hello World!""",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","PreRegisterService","sendDiscordWebhook","","","","should handle errors if fetch fails",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","20","ItineraryService","inviteToItinerary","","","","should throw ForbiddenException if user is not the owner of the itinerary",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryService","acceptItineraryInvitation","","","","should throw NotFoundException if the pending invitation does not exist",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","1","PaginationDto","","","","","should allow page to be optional",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","ItineraryService","removeUserFromItinerary","","","","should throw NotFoundException if the itinerary does not exist",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","5","AuthGuard","","","","","should throw UnauthorizedException if token is not provided",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryController","inviteToItinerary","","","","should invite a user to an itinerary and return a formatted response",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryService","createContingencyPlan","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","4","AuthGuard","","","","","should allow access if the route is public",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","4","GeminiService","generateFeedback","","","","should return parsed feedback array from AI response",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","17","AuthService","verify","","","","should throw NotFoundException if verification code is not found",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","77","AuthService","login","","","","should throw UnauthorizedException if user is not found",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","findMySharedItineraries","","","","should throw an error when page number exceeds total pages",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","8","AuthService","login","","","","should throw UnauthorizedException if password is invalid",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","32","AuthGuard","","","","","should be defined",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","5","AuthService","register","","","","should update user and send registration email if verification is successful",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","findAllMyItineraries","","","","should throw an error when page number exceeds total pages",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","findMySharedItineraries","","","","should return itineraries shared with the user",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","7","ItineraryService","acceptItineraryInvitation","","","","should throw NotFound if user email is not found to accept the invitation",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","PreRegisterService","sendDiscordWebhook","","","","should not send webhook if DISCORD_WEBHOOK_URL is not set",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","findMyItineraries","","","","should return empty data when there are no itineraries",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","removeUserFromItinerary","","","","should remove a user from the itinerary successfully",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","26","ItineraryService","createItinerary","","","","should throw BadRequestException when date format is invalid",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","15","GeminiService","","","","","should be defined",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","6","GeminiService","generateFeedback","","","","should throw InternalServerErrorException on AI error",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","2","UmamiService","","","","","should log an error and return if UMAMI_DISCORD_WEBHOOK_URL is not set",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","10","PreRegisterService","sendDiscordWebhook","","","","should send webhook for pre-registration",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","25","AuthService","sendVerification","","","","should delete the oldest ticket if there are too many",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","4","ItineraryController","createItinerary","","","","should create an itinerary and return a formatted response",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","3","AuthController","register","","","","should call authService.register with correct data",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","10","EmailService","","","","","should be defined",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","removeUserFromItinerary","","","","should throw NotFoundException if the itinerary does not exist",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","3","PreRegisterController","getPreRegisterCount","","","","should return the pre-register count",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","findMyCompletedItineraries","","","","should correctly count LOCATION blocks",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","markAsComplete","","","","should throw ForbiddenException if user is not the owner",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","8","AuthService","createUser","","","","should throw BadRequestException if user was created recently and is not confirmed",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryService","findOneItinerary","","","","should return itinerary when found and user has access to it",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","6","AuthGuard","","","","","should throw UnauthorizedException if token has expired",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","4","AuthController","login","","","","should throw UnauthorizedException if email is not registered",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","createItinerary","","","","should create an itinerary without tags",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","2","MapService","","","","","should throw an error when API call fails",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","70","PreRegisterService","createPreRegister","","","","should create a new user and send confirmation email",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","3","AuthGuard","","","","","should throw UnauthorizedException if token is invalid",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryService","updateItinerary","","","","should throw ForbiddenException if user does not own the itinerary",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","8","ItineraryService","findAllTags","","","","should return an array of tags",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","9","MapService","","","","","should throw an error if placeId is not provided",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","11","ItineraryService","findMyItineraries","","","","should return empty list if user has no itineraries",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryService","removeUserFromItinerary","","","","should throw NotFoundException if the user to be removed is not a participant",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","5","AuthService","verify","","","","should throw UnauthorizedException if emails do not match",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","11","AuthController","refreshToken","","","","should throw UnauthorizedException if refresh token is invalid",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","6","AuthService","verify","","","","should throw UnauthorizedException if firstNames do not match",""
"passed","Sat Apr 05 18:05:19 GMT 2025","Sat Apr 05 18:05:19 GMT 2025","5","TicketService","","","","","should be defined",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","4","RefreshStrategy","","","","","should validate user if refresh token is valid",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","acceptItineraryInvitation","","","","should accept an itinerary invitation and link the user to the itinerary using itineraryId",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","findMySharedItineraries","","","","should return empty data when user has no shared itineraries",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","3","AuthController","verify","","","","should call authService.verify with correct data",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","10","ItineraryController","findOne","","","","should throw NotFoundException if itinerary is not found",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","25","StaticService","searchCities","","","","should return list of cities based on country",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","5","AuthService","register","","","","should throw BadRequestException if passwords do not match",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","PreRegisterService","validateLogin","","","","should throw UnauthorizedException if ticket is expired",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","markAsComplete","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","47","PreRegisterService","","","","","should be defined",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","108","ItineraryService","","","","","should be defined",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","3","StaticService","getCountryCode","","","","should return country code response",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryService","updateItinerary","","","","should throw BadRequestException when date format is invalid",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","9","ItineraryController","removeUserFromItinerary","","","","should remove a user from an itinerary and return a formatted response",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","ItineraryController","markAsComplete","","","","should mark itinerary as complete",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","11","GeminiController","","","","","should be defined",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryController","acceptItineraryInvitation","","","","should accept an itinerary invitation",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","33","ItineraryService","findOneItinerary","","","","should allow user to see itinerary if invited",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","markAsComplete","","","","should mark itinerary as complete",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","20","PreRegisterService","_generateTicket","","","","should delete the oldest ticket if more than 5 exist",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","4","AuthController","refreshToken","","","","should return new access and refresh tokens",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","2","StaticController","getCountries","","","","should return list of countries",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","3","AuthService","refreshToken","","","","should throw UnauthorizedException if refresh token is blacklisted",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","findAllTags","","","","should return an empty array if there are no tags",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","updateItinerary","","","","should update an itinerary with defaults for deleted/missing fields",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","findOneItinerary","","","","should throw ForbiddenException if user is not authorized",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","ItineraryController","inviteToItinerary","","","","should throw ForbiddenException if the user is not authorized to invite",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","updateItinerary","","","","should throw BadRequestException when no sections are provided",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","4","PreRegisterService","login","","","","should send login email if user exists",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","12","PreRegisterService","createPreRegister","","","","should throw BadRequestException if email is already registered",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","6","StaticService","searchCountries","","","","should return list of countries",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","3","EmailService","","","","","should send an email successfully",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","4","AuthService","clearExpiredRefreshTokens","","","","should delete expired refresh tokens",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","ItineraryController","findAllMyItineraries","","","","should return all itineraries with default parameters",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","ItineraryService","createItinerary","","","","should create an itinerary with default section title, empty blocks, and empty tags",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","3","AuthService","sendVerification","","","","should throw BadRequestException if requesting too fast",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","3","PreRegisterController","validateLogin","","","","should call service.validateLogin with correct ticketId",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","2","ItineraryService","findAllMyItineraries","","","","should throw an error for invalid page number",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","ItineraryService","createItinerary","","","","should throw BadRequestException when no sections are provided",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","4","AuthController","login","","","","should throw UnauthorizedException if password is incorrect",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","ItineraryController","markAsComplete","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","8","TicketController","","","","","should be defined",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","updateItinerary","","","","should throw NotFoundException when tags do not exist",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","16","ItineraryService","createItinerary","","","","should throw BadRequestException when start date is after end date",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryController","findAllMyItineraries","","","","should filter itineraries with shared=true and finished=true",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","ItineraryController","findMyItineraries","","","","should return itineraries successfully",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","_checkUpdateItineraryPermission","","","","should throw NotFoundException when itinerary does not exist",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","8","ItineraryService","inviteToItinerary","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","findMySharedItineraries","","","","should handle service errors for shared itineraries",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryController","findAllMyItineraries","","","","should filter itineraries with shared=false and finished=false",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","5","ItineraryController","removeItinerary","","","","should throw an error if itinerary is not found",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","13","PreRegisterService","validateLogin","","","","should validate login ticket and return access token",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","3","ItineraryService","_checkUpdateItineraryPermission","","","","should throw ForbiddenException when user is not the owner",""
"passed","Sat Apr 05 18:05:19 GMT 2025","Sat Apr 05 18:05:19 GMT 2025","5","PaymentService","","","","","should be defined",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","3","EmailService","","","","","should handle errors if sending email fails",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","6","PaymentController","","","","","should be defined",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","12","ItineraryController","acceptItineraryInvitation","","","","should throw NotFoundException if the invitation does not exist",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","2","StaticController","getCities","","","","should return list of cities",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryController","inviteToItinerary","","","","should throw NotFoundException if the itinerary does not exist",""
"passed","Sat Apr 05 18:05:15 GMT 2025","Sat Apr 05 18:05:15 GMT 2025","3","AuthService","sendVerification","","","","should throw BadRequestException if user does not exist",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","2","UmamiService","sendToDiscord","","","","should handle Discord webhook errors gracefully",""
"passed","Sat Apr 05 18:05:16 GMT 2025","Sat Apr 05 18:05:16 GMT 2025","6","ItineraryService","findOneItinerary","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Sat Apr 05 18:05:18 GMT 2025","Sat Apr 05 18:05:18 GMT 2025","2","RefreshStrategy","","","","","should extract refresh token from cookies",""
"passed","Sat Apr 05 18:05:17 GMT 2025","Sat Apr 05 18:05:17 GMT 2025","28","StaticService","","","","","should be defined",""
