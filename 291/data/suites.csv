"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryService","findOneItinerary","","","","should throw ForbiddenException if user is not authorized",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryService","updateItinerary","","","","should update an itinerary with new details, tags, sections, and blocks",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","2","AuthService","verifyPasswordReset","","","","should throw NotFoundException if verification code is not found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryController","findAllMyItineraries","","","","should filter itineraries with shared=true and finished=true",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","acceptItineraryInvitation","","","","should accept an itinerary invitation and link the user to the itinerary using itineraryId",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","20","AuthGuard","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","updateContingencyPlan","","","","should throw BadRequestException when sections validation fails",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findMyCompletedItineraries","","","","should correctly count LOCATION blocks",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","EmailService","","","","","should send an email successfully",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","NotificationService","findAll","","","","should return an empty array of itinerary reminders if none found",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","4","AuthController","googleLogin","","","","should return success on successful Google login",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","33","GeminiService","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","5","ItineraryController","findOne","","","","should throw ForbiddenException if user is not authorized",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","8","ItineraryService","duplicateItinerary","","","","should duplicate an itinerary succesfully",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","6","TourService","createTourView","","","","should throw NotFoundException if tour doesnt exist",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","5","ProfileController","getTransactionHistory","","","","should handle NotFoundException if service throws it",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ProfileService","getListItineraryLikes","","","","should return a list of liked itineraries for a user",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","acceptItineraryInvitation","","","","should throw ForbiddenException if the user is not authorized to accept the invitation",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","3","AuthService","resetPassword","","","","should throw BadRequestException if passwords do not match",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","selectContingency","","","","should select a contingency plan and return a formatted response",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","ProfileController","requestChangeEmail","","","","should return success response when email change request is successful",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","update","","","","should throw NotFoundException if itinerary reminder does not exist",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","4","PreRegisterService","sendDiscordWebhook","","","","should not send webhook if DISCORD_WEBHOOK_URL is not set",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","12","PaymentService","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","acceptItineraryInvitation","","","","should throw NotFoundException if itineraryId is not found when accepting an invitation",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","changePassword","","","","should throw BadRequestException when new password and confirmation do not match",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","updateItinerary","","","","should throw NotFoundException when tags do not exist",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","8","AuthService","register","","","","should update user and send registration email if verification is successful",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","create","","","","should throw ConflictException if itinerary reminder already exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","updateContingencyPlan","","","","should throw NotFoundException when contingency plan does not exist",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","28","NotificationService","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","updateItinerary","","","","should throw BadRequestException when start date is after end date",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","NotificationController","findOne","","","","should fetch an itinerary reminder and return OK when found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ProfileService","_verifyChangeEmailTicket","","","","should throw NotFoundException when ticket is not found",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","GeminiService","createPrompt","","","","should handle empty sections",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","_verifyChangeEmailTicket","","","","should throw BadRequestException when ticket has expired",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","ProfileController","requestChangeEmail","","","","should call sendVerificationCode service with correct parameters",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","PreRegisterService","validateLogin","","","","should throw UnauthorizedException if ticket is expired",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","unsaveItinerary","","","","should unsave the itinerary for the user",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","duplicateItinerary","","","","should duplicate an itinerary with default fields succesfully",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","createItinerary","","","","should handle optional fields in the DTO correctly",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","duplicateContingency","","","","should throw NotFoundException if contingency does not exist",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","PaymentService","create","","","","should return a string indicating a new payment was added",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","sendVerificationCode","","","","should successfully generate and send verification code",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","TourController","getTourView","","","","should call service and return viewed tours",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","9","AuthService","sendPasswordResetVerification","","","","should send password reset verification email if user exists and has email registered",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","createItinerary","","","","should handle empty createdBlocks and use default TRANSPORT_MODE.DRIVE when transportMode is not provided",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","onModuleInit","","","","should call setupIndexes on module init",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","131","AuthService","register","","","","should throw NotFoundException if user is not found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findMySharedItineraries","","","","should return itineraries shared with the user",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ProfileService","_verifyChangeEmailTicket","","","","should successfully verify a valid ticket",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","AuthController","googleRegister","","","","should throw InternalServerErrorException if Firebase token verification fails",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","4","PreRegisterService","validateLogin","","","","should validate login ticket and return access token",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","AuthGuard","","","","","should throw UnauthorizedException if token has expired",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","ProfileController","getListItineraries","","","","should return empty array when user has no itineraries",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","5","TourController","createTourView","","","","should call service and return response",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","inviteToItinerary","","","","should throw ForbiddenException if user is not the owner of the itinerary",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","AuthController","verify","","","","should call authService.verify with correct data",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","scheduleEmail","","","","should schedule a sendEmail job and verify it runs",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","deleteItinerary","","","","should handle document not found gracefully",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","clearExpiredRefreshTokens","","","","should delete expired refresh tokens",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","calculateScheduleDate","","","","should calculate scheduled date correctly",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","batchCheckUserSavedItinerary","","","","should return empty array if the list is empty",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","StaticController","getCountries","","","","should return list of countries",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","33","TourController","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","createContingencyPlan","","","","should throw ForbiddenException if user does not own the itinerary",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","getSearchSuggestions","","","","should limit suggestions to top 5 results",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","findAllMyItineraries","","","","should return paginated itineraries for both owned and shared when sharedBool is false",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","5","ItineraryService","createItinerary","","","","should create an itinerary with default section title, empty blocks, and empty tags",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","createViewItinerary","","","","should throw NotFoundException if tour doesnt exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","_checkContingencyCount","","","","should return 1 when there is one contingency plan",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryController","findAllMyItineraries","","","","should handle service errors correctly",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ProfileService","getListItineraryLikes","","","","should handle user with no liked itineraries",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","googleRegister","","","","should handle names from Firebase correctly",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","7","GeminiService","createPrompt","","","","should handle missing description",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","MapService","getPlaceDetails","","","","should return place details with price range when successful",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findMyItineraries","","","","should return itineraries successfully",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","ProfileController","changeEmailVerification","","","","should call verifyEmailChange service with correct parameters",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","ProfileController","updatePhotoProfile","","","","should update photo profile when called with valid URL",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","ProfileController","updateProfile","","","","should update a profile when called with valid ID and data",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","MeilisearchService","searchItineraries","","","","should search itineraries with the provided query and options",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","7","ItineraryService","findAllTags","","","","should return an array of tags",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","MeilisearchService","addOrUpdateItinerary","","","","should add a published itinerary to the index",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","8","ItineraryController","findItinerariesByLatestTags","","","","should pass user object directly to service",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","MapService","getPriceRangeByPlaceId","","","","should return price range when API call is successful",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","4","RefreshStrategy","","","","","should throw UnauthorizedException if user not found",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","PaymentService","findOne","","","","should return a string indicating a specific payment was returned",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","syncTours","","","","should fetch tours and index them",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","ProfileController","getTransactionHistory","","","","should return transaction history when getTransactionHistory is called with a valid user",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","updateItinerary","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","5","ItineraryController","publishItinerary","","","","should throw BadRequestException if already published",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findMyItineraries","","","","should return empty list if user has no itineraries",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findContingencyPlans","","","","should return all contingency plans for the given itinerary",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","PreRegisterService","_generateTicket","","","","should delete the oldest ticket if more than 5 exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","1","ProfileService","updateProfile","","","","should update user profile with valid data",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","TourService","findOne","","","","should return tour with itinerary when found",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","MapService","getPriceRangeByPlaceId","","","","should handle missing price range data",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","create","","","","should create an itinerary reminder",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","ProfileController","changePassword","","","","should call changePassword service with correct parameters",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","PreRegisterService","validateLogin","","","","should throw UnauthorizedException for invalid ticket",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","PreRegisterController","preRegister","","","","should call service.createPreRegister with correct data",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","ProfileController","changeEmailVerification","","","","should return success response when email change verification is successful",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:15 GMT 2025","110","ItineraryService","","","","","should be defined",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","UmamiService","getUmamiAnalytics","","","","should handle fetch errors gracefully",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","resetPassword","","","","should throw BadRequestException if user's email is not registered",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","PreRegisterService","getReferralCode","","","","should return user referral code and count",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","MeilisearchService","setupIndexes","","","","should create itinerary and tour indexes if they do not exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","removeUserFromItinerary","","","","should throw NotFoundException if the itinerary does not exist",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","TourService","searchTours","","","","should handle various duration filters correctly",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findMySharedItineraries","","","","should throw an error for invalid page number",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","syncItineraries","","","","should fetch published itineraries and index them",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","removeUserFromItinerary","","","","should throw ForbiddenException if the user is not the owner of the itinerary",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","markAsComplete","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","MapController","","","","","should handle service errors properly",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","4","PreRegisterService","sendDiscordWebhook","","","","should send webhook for login-validation",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","PreRegisterService","login","","","","should throw BadRequestException if email is not registered",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","googleRegister","","","","should throw ConflictException if user already exists",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","searchItineraries","","","","should handle errors from the search service",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","getListItineraries","","","","should handle user with no itineraries",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findAllMyItineraries","","","","should throw an error when page number exceeds total pages",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","9","PreRegisterService","createPreRegister","","","","should throw BadRequestException if email is already registered",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","TourService","searchTours","","","","should handle duration with durationType correctly",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","removeUserFromItinerary","","","","should remove a user from an itinerary and return a formatted response",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","4","AuthController","verifyPasswordReset","","","","should call authService.verifyPasswordReset with correct data",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","96","ItineraryController","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","createContingencyPlan","","","","should create a contingency plan with sections and blocks",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","findOne","","","","should return a user profile by id",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","acceptItineraryInvitation","","","","should return itineraryId if user already has access to the itinerary",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryController","updateItinerary","","","","should pass errors from service to the caller",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","8","ItineraryController","findOne","","","","should return an itinerary when found",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","PaymentController","findAll","","","","should return an array of payments",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","AuthController","googleRegister","","","","should throw ConflictException if user already exists during Google registration",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","inviteToItinerary","","","","should invite a user to an itinerary and return a formatted response",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","TourService","createTourView","","","","should just create view if less than 10 views",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryController","createItinerary","","","","should pass errors from service to the caller",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","removeItinerary","","","","should throw ForbiddenException when user is not the owner of the itinerary",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","14","ProfileController","updateProfile","","","","should update only the fields provided in the DTO",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","1","PaginationDto","","","","","should allow page to be optional",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","GeminiController","","","","","should call geminiService.generateFeedback with valid dto",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","_checkContingencyCount","","","","should return 0 when there are no contingency plans",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","publishItinerary","","","","should publish an itinerary and return success response",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findContingencyPlan","","","","should throw NotFoundException when contingency plan does not exist",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","AuthGuard","","","","","should throw UnauthorizedException if user not found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","MeilisearchService","addOrUpdateTour","","","","should handle undefined tour gracefully",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","MeilisearchService","deleteItinerary","","","","should delete an itinerary from the index",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","7","AuthController","login","","","","should throw UnauthorizedException if email is not registered",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","6","NotificationService","create","","","","should throw NotFoundException if itinerary doesnt exist",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","EmailService","","","","","should handle errors if sending email fails",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","findContingencies","","","","should return contingency plans for an itinerary",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","saveItinerary","","","","should save a public itinerary for the user",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","14","ItineraryController","findMySharedItineraries","","","","should return shared itineraries successfully",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","batchCheckUserSavedItinerary","","","","should check saved status of public itinerary ids for the user",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","calculateScheduleDate","","","","should throw BadRequestException on improper reminder option",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryService","searchItineraries","","","","should handle search with complex filters and sorting",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","7","AuthService","verifyPasswordReset","","","","should throw BadRequestException when ticket has expired",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","5","ItineraryController","findMyCompletedItineraries","","","","should return completed itineraries with response formatting",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","7","AuthController","refreshToken","","","","should return new access and refresh tokens",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","publishItinerary","","","","should throw ForbiddenException if user is not the owner",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","ProfileController","getListItineraryLikes","","","","should return empty array when user has no itinerary likes",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","MapController","","","","","should throw an error if placeId is not provided",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","AuthGuard","","","","","should allow access if token is valid",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","MeilisearchController","syncItineraries","","","","should handle service errors properly",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","3","AuthService","verify","","","","should throw NotFoundException if verification code is not found",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","PreRegisterService","_generateTicket","","","","should throw BadRequestException if last ticket is still valid",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","TourController","searchTours","","","","should search tours with default parameters",""
"passed","Mon May 19 09:47:13 GMT 2025","Mon May 19 09:47:13 GMT 2025","21","AuthService","login","","","","should return access and refresh tokens if login is successful",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","updateContingencyPlan","","","","should throw ForbiddenException when contingency plan belongs to different itinerary",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","PreRegisterController","login","","","","should call service.login with the correct email",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","createUser","","","","should create a new user if user does not exist",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","AuthGuard","","","","","should throw UnauthorizedException if token is invalid",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","GeminiService","generateFeedback","","","","should parse JSON even if AI returns extra text",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","createViewItinerary","","","","should throw NotFoundException if itinerary doesnt exist",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","PreRegisterController","getPreRegisterCount","","","","should return the pre-register count",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findMySharedItineraries","","","","should return empty data when there are no shared itineraries",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","updateItinerary","","","","should throw BadRequestException when no sections are provided",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","acceptItineraryInvitation","","","","should throw NotFound if user email is not found to accept the invitation",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","createItinerary","","","","should not create route when routeToNext is undefined or null",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","NotificationController","updateAndReschedule","","","","should update an itinerary reminder and reschdule the cron job",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryService","createItinerary","","","","should handle non-consecutive block positions when creating routes",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","_generateChangeEmailTicket","","","","should successfully generate a change email ticket",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","selectContingency","","","","should throw NotFoundException if contingency not found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findMyCompletedItineraries","","","","should return an empty array when there are no completed itineraries",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","13","MeilisearchController","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ProfileService","verifyEmailChange","","","","should propagate errors from _verifyChangeEmailTicket",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","PreRegisterController","validateLogin","","","","should call service.validateLogin with correct ticketId",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","132","AuthService","verifyFirebaseToken","","","","should use existing admin instance when apps.length > 0",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","TourService","createTourView","","","","should update viewedAt if tour already viewed",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","UmamiService","sendToDiscord","","","","should send analytics data to Discord",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","googleRegister","","","","should register a new user and return tokens",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","StaticService","getCountryCode","","","","should return country code response",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","formatItineraryForIndex","","","","should handle null or undefined itinerary and return null",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","updateItinerary","","","","should update an itinerary with defaults for missing block fields",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","PreRegisterController","referralCode","","","","should call service.getReferralCode with the correct userId",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","verifyFirebaseToken","","","","should verify a Firebase token and return user data",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","formatItineraryForIndex","","","","should handle missing fields gracefully",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","findMySharedItineraries","","","","should throw an error when page number exceeds total pages",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","markAsComplete","","","","should mark itinerary as complete",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryService","createItinerary","","","","should throw BadRequestException when start date is after end date",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","duplicateContingency","","","","should throw ForbiddenException if user does not own the itinerary and the itinerary is not public",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","PaymentController","findOne","","","","should return a single payment",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryController","searchItineraries","","","","should search itineraries with combined filters and custom sorting",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findMyItineraries","","","","should handle overflow page numbers",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ProfileService","getTransactionHistory","","","","should return a list of transactions for a user",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","unsaveItinerary","","","","should unsave the itinerary for the user",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findAllMyItineraries","","","","should return only completed itineraries when finishedBool is true",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","39","AuthController","login","","","","should return access and refresh tokens on successful login",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","MeilisearchController","syncItineraries","","","","should throw UnauthorizedException when API key is missing",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","getSearchSuggestions","","","","should return search suggestions based on query",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","inviteToItinerary","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","cancelScheduledEmail","","","","should throw a NotFoundException if job doesnt exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","selectContingencyPlan","","","","should throw NotFoundException when contingency plan does not exist",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","MeilisearchController","syncTours","","","","should throw UnauthorizedException when provided with invalid API key",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","createItinerary","","","","should throw NotFoundException when tags do not exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","MeilisearchService","formatTourForIndex","","","","should handle null or undefined tour and return null",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","getListItineraries","","","","should correctly calculate totalDestinations when sections is empty",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","8","UmamiService","sendToDiscord","","","","should handle Discord webhook errors gracefully",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","6","AuthService","verifyFirebaseToken","","","","should throw InternalServerErrorException if Firebase verification fails",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","unsaveItinerary","","","","should throw BadRequestException if user does not have the itinerary saved",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findOneItinerary","","","","should return itinerary when found and user has access to it",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","updateItinerary","","","","should throw BadRequestException when block start time is after end time",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","PaginationDto","","","","","should return validation error if page is negative",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","7","AuthController","refreshToken","","","","should throw UnauthorizedException if refresh token is invalid",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","7","AuthService","createUser","","","","should throw ConflictException if user already exists and is confirmed",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","4","AuthController","logout","","","","should clear refreshToken cookie",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","10","GeminiService","createPrompt","","","","should create a properly formatted prompt with all data types",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","TourController","getSearchSuggestions","","","","should return empty suggestions for short queries",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","duplicateContingency","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","batchCheckUserSavedItinerary","","","","should check saved status of public itinerary ids for the user and return success response",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","updateItinerary","","","","should throw BadRequestException when duplicate section numbers are provided",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","findOne","","","","should throw NotFoundException if associated itinerary's reminder does not exist",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","sendVerification","","","","should throw BadRequestException if requesting too fast",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","5","ItineraryController","getSearchSuggestions","","","","should return empty suggestions for short queries",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","9","AuthController","getme","","","","should return the authenticated user",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","publishItinerary","","","","should throw NotFoundException if itinerary not found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","8","MeilisearchService","deleteTour","","","","should handle document not found gracefully",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findMySharedItineraries","","","","should handle service errors for shared itineraries",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","41","ProfileController","","","","","should be defined",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","4","MeilisearchController","syncItineraries","","","","should throw UnauthorizedException when provided with invalid API key",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","9","StaticController","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","removeItinerary","","","","should remove an itinerary successfully",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","5","GeminiService","generateFeedback","","","","should return parsed feedback array from AI response",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","7","TourService","findOne","","","","should throw NotFoundException if tour not found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","MeilisearchService","syncTours","","","","should not index if no tours",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","updateContingency","","","","should throw NotFoundException if contingency not found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findAllMyItineraries","","","","should return only shared itineraries when sharedBool is true",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","3","AuthService","sendPasswordResetVerification","","","","should throw BadRequestException if user does not exist",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","26","PreRegisterService","createPreRegister","","","","should create a new user and send confirmation email",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","5","AppController","root","","","","should return ""Hello World!""",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","9","ItineraryService","createItinerary","","","","should create an itinerary with sections and blocks",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","9","ItineraryController","searchItineraries","","","","should search itineraries with tags filter",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findContingencies","","","","should throw NotFoundException if itinerary not found",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","googleRegister","","","","should use email prefix if no name is provided",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryController","markAsComplete","","","","should throw ForbiddenException if user is not the owner",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","NotificationController","findOne","","","","should pass errors from service to the caller",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","remove","","","","should throw NotFoundException if itinerary doesnt exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","_checkUpdateItineraryPermission","","","","should throw NotFoundException when itinerary does not exist",""
"passed","Mon May 19 09:47:13 GMT 2025","Mon May 19 09:47:14 GMT 2025","31","AuthService","refreshToken","","","","should throw UnauthorizedException if refresh token is blacklisted",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","markAsComplete","","","","should mark itinerary as complete",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","updateItinerary","","","","should throw ForbiddenException if user does not own the itinerary",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","sendVerification","","","","should send verification email if user exists",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","calculateDaysCount","","","","should return 1 for missing dates",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","1","RefreshStrategy","","","","","should validate user if refresh token is valid",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","ProfileController","updatePhotoProfile","","","","should call updatePhotoProfile service with correct parameters",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","publishItinerary","","","","should unpublish the itinerary and remove from search index",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","inviteToItinerary","","","","should send invitations to the provided emails",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","createViewItinerary","","","","should delete oldest view if already 10 and add new",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","changePassword","","","","should handle user not found",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","AuthGuard","","","","","should allow access if the route is public",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","searchItineraries","","","","should search itineraries with day count range filters",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","PreRegisterService","sendDiscordWebhook","","","","should handle errors if fetch fails",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findAllMyItineraries","","","","should return all itineraries with default parameters",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","ProfileController","getTransactionHistory","","","","should return empty array when user has no transactions",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryController","createItinerary","","","","should create an itinerary without tags",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findOneItinerary","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryService","selectContingencyPlan","","","","should select a contingency plan and unselect others",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","NotificationService","findAll","","","","should return an array of itinerary reminders",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","6","AuthService","verify","","","","should throw UnauthorizedException if emails do not match",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","AuthController","register","","","","should call authService.register with correct data",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","addOrUpdateItinerary","","","","should handle undefined itinerary gracefully",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","_checkUpdateItineraryPermission","","","","should throw ForbiddenException when user is not the owner",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","NotificationService","_formatReminderOption","","","","should return ""1 jam"" for ONE_HOUR_BEFORE option",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findItinerariesByLatestTags","","","","should handle when no tags are found in combined itineraries",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","createViewItinerary","","","","should just create view if less than 10 views",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","sendVerification","","","","should delete the oldest ticket if there are too many",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findItinerariesByLatestTags","","","","should handle null result from itineraryTag.findMany",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","16","ItineraryService","findContingencyPlan","","","","should throw ForbiddenException when contingency plan belongs to different itinerary",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","cancelScheduledEmail","","","","should cancel an existing scheduled email job",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","2","AuthService","register","","","","should throw BadRequestException if passwords do not match",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","5","ProfileService","getTransactionHistory","","","","should return an empty array when user has no transactions",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","TourService","createTourView","","","","should delete oldest view if already 10 and add new",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","markAsComplete","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","31","PreRegisterService","","","","","should be defined",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","TourController","getSearchSuggestions","","","","should return tour title suggestions",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","6","NotificationService","onModuleInit","","","","should reschedule itinerary reminders on server restart",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","findOneItinerary","","","","should allow user to see itinerary if invited",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","3","AuthService","verifyFirebaseToken","","","","should throw InternalServerErrorException if email is missing",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","duplicateItineraryAndContingencies","","","","should duplicate an itinerary with no contingencies and return a formatted response",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","4","ProfileController","getListItineraryLikes","","","","should return itinerary likes when getListItineraryLikes is called with a valid ID",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","1","PreRegisterService","getReferralCode","","","","should throw BadRequestException if user is not found",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","AuthController","resetPassword","","","","should call authService.resetPassword with correct data",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","removeItinerary","","","","should call remove() in the service and delete an itinerary",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","removeUserFromItinerary","","","","should throw NotFoundException if the user to be removed does not exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryService","findMyItineraries","","","","should return paginated itineraries",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","8","PreRegisterService","_generateTicket","","","","should create a new ticket for the user",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","MeilisearchService","deleteTour","","","","should delete a tour from the index",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","removeUserFromItinerary","","","","should throw NotFoundException if the itinerary does not exist",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","4","PreRegisterService","createPreRegister","","","","should throw NotFoundException if referral code is not found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","unsaveItinerary","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","PaginationDto","","","","","should transform page to a number",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","13","ItineraryController","publishItinerary","","","","should throw ForbiddenException if user is not owner",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryService","removeUserFromItinerary","","","","should remove a user from the itinerary successfully",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","scheduleEmail","","","","should throw a ConflictException on already scheduled reminders",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","10","ItineraryService","_checkUpdateItineraryPermission","","","","should return the itinerary if user is the owner",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryController","findContingencyById","","","","should return a specific contingency plan",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","verifyEmailChange","","","","should successfully change user email after verification",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","PaymentService","remove","","","","should return a string indicating a payment was removed",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","MeilisearchService","formatTourForIndex","","","","should handle missing fields gracefully",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findAllMyItineraries","","","","should throw an error for invalid page number",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","7","PreRegisterService","sendDiscordWebhook","","","","should send webhook for pre-registration",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","updateItinerary","","","","should throw BadRequestException when date format is invalid",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","4","TourService","getTourView","","","","should return list of tour views ordered by viewedAt desc",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","changePassword","","","","should throw BadRequestException when new password is same as old password",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","21","AuthService","refreshToken","","","","should return new access and refresh tokens if refresh token is valid",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","duplicateItinerary","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findMyItineraries","","","","should handle negative page numbers",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","7","ItineraryController","updateItinerary","","","","should update an itinerary and return a formatted response",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","5","AuthGuard","","","","","should throw UnauthorizedException if token is not provided",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","MeilisearchController","syncTours","","","","should handle service errors properly",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","14","PreRegisterController","","","","","should be defined",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","PaymentController","create","","","","should create a payment",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","3","AuthService","resetPassword","","","","should throw NotFoundException if user is not found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","15","MeilisearchService","deleteItinerary","","","","should throw other errors",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","updatePhotoProfile","","","","should successfully update user photo profile",""
"passed","Mon May 19 09:47:13 GMT 2025","Mon May 19 09:47:13 GMT 2025","6","AuthService","login","","","","should throw UnauthorizedException if password is invalid",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","unsaveItinerary","","","","should pass errors from service to the caller",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","9","ItineraryService","findMyCompletedItineraries","","","","should return completed itineraries with locationCount",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","TourService","searchTours","","","","should handle a single filter correctly",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","16","MapController","","","","","should return place details when placeId is valid",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","MeilisearchService","searchTours","","","","should search tours with the provided query and options",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","ProfileController","changePassword","","","","should return success response when password change is successful",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","findOne","","","","should calculate totalLikes from itineraries correctly",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","15","MapService","getPlaceDetails","","","","should throw an error when API call fails",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ProfileService","updateProfile","","","","should only update specified fields",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","5","AuthService","googleLogin","","","","should throw NotFoundException if user does not exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findAllTags","","","","should return an empty array if there are no tags",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","8","GeminiController","","","","","should throw an error if itineraryData.sections is empty",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","19","GeminiService","generateFeedback","","","","should throw InternalServerErrorException on AI error",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","8","ProfileService","findOne","","","","should throw NotFoundException if user is not found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","removeItinerary","","","","should throw an error if itinerary is not found",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","resetPassword","","","","should update user password and send success password reset email if verification is successful",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","NotificationService","_formatReminderOption","","","","should return ""1 hari"" for ONE_DAY_BEFORE option",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","formatTourForIndex","","","","should correctly format a tour for indexing",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","searchItineraries","","","","should search with custom sort parameters",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","4","NotificationController","createAndSchedule","","","","should create an itinerary reminder and schedule the cron job",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","25","MeilisearchService","setupIndexes","","","","should not create index if it already exists",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","GeminiService","createPrompt","","","","should format dates according to Indonesian time format",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","TourService","searchTours","","","","should handle empty search results",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","TourController","findOne","","","","should return a successful response with tour data",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","unsaveItinerary","","","","should throw BadRequestException if user owns the itinerary its trying to unsave",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","saveItinerary","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","findOne","","","","should return an itinerary reminder with associated itinerary id",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","StaticService","searchCountries","","","","should return list of countries",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","update","","","","should update an itinerary reminder",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","saveItinerary","","","","should throw BadRequestException if user owns the itinerary its trying to save",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","duplicateItineraryAndContingencies","","","","should pass errors from service to the caller",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","saveItinerary","","","","should throw BadRequestException if user already saved the itinerary",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","10","PaymentService","update","","","","should return a string indicating a payment was updated",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","scheduleEmail","","","","should throw a BadRequestException on jobs with date in past",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","MeilisearchController","syncTours","","","","should sync tours when provided with valid API key",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","_formatReminderOption","","","","should return ""10 menit"" for TEN_MINUTES_BEFORE option",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryService","findItinerariesByLatestTags","","","","should find itineraries by tags from user's latest and recently viewed itineraries",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","StaticController","getCountryCode","","","","should return country code",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","14","ProfileService","getTransactionHistory","","","","should include all transaction fields in the result",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","1","UmamiService","getUmamiAnalytics","","","","should return 401 Unauthorized if UMAMI_API_KEY is not set",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryService","_checkContingencyCount","","","","should throw BadRequestException when there are already 2 contingency plans",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","4","TourController","searchTours","","","","should pass search parameters to the service",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","removeUserFromItinerary","","","","should throw ForbiddenException if the user is not authorized to remove participants",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","5","UmamiService","getUmamiAnalytics","","","","should fetch analytics data and send to Discord",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","createContingency","","","","should throw NotFoundException if itinerary not found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","createViewItinerary","","","","should update viewedAt if itinerary already viewed",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","updateContingency","","","","should throw ForbiddenException if user is not authorized",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","14","PaymentController","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","MeilisearchService","formatItineraryForIndex","","","","should correctly format an itinerary for indexing",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","4","PreRegisterService","login","","","","should send login email if user exists",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","MeilisearchController","syncTours","","","","should throw UnauthorizedException when API key is missing",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","NotificationService","remove","","","","should remove an itinerary reminder",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","_generateChangeEmailTicket","","","","should delete oldest ticket when there are 5 or more existing tickets",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","11","AuthController","requestPasswordReset","","","","should call authService.sendPasswordResetVerification with correct data",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","AuthController","googleRegister","","","","should return success on successful Google registration",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findMyItineraries","","","","should throw an error for invalid page number",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","acceptItineraryInvitation","","","","should throw NotFoundException if the pending invitation does not exist",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","MapService","getPriceRangeByPlaceId","","","","should throw an error when API call fails",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findItinerariesByLatestTags","","","","should properly handle user without any itineraries",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","inviteToItinerary","","","","should throw ForbiddenException if the user is not authorized to invite",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","6","EmailService","","","","","should be defined",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","MeilisearchController","syncItineraries","","","","should sync itineraries when provided with valid API key",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ProfileService","changePassword","","","","should throw UnauthorizedException when old password is incorrect",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","syncItineraries","","","","should not index if no published itineraries",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","UmamiService","_getPreviousMonthRange","","","","should return the correct start and end timestamps for the previous month",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","9","ItineraryService","createItinerary","","","","should throw BadRequestException when duplicate section numbers are provided",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","StaticService","_getCountryCode","","","","should return country details based on placeId",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","12","ItineraryController","searchItineraries","","","","should search itineraries with query and page parameters",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","7","AuthController","login","","","","should throw UnauthorizedException if password is incorrect",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findContingencies","","","","should throw ForbiddenException if user is not authorized",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","findMySharedItineraries","","","","should return empty data when user has no shared itineraries",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryService","saveItinerary","","","","should throw ForbiddenException if user doesnt have access to itinerary",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","findAllTags","","","","should return an empty array if no tags are found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryController","duplicateItineraryAndContingencies","","","","should duplicate an itinerary and its contingencies and return a formatted response",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","AuthController","googleLogin","","","","should throw NotFoundException if user is not found during Google login",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findMyItineraries","","","","should return empty data when there are no itineraries",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","searchItineraries","","","","should search itineraries with filters",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","MeilisearchService","searchItineraries","","","","should add isPublished filter when no other filters",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findItinerariesByLatestTags","","","","should handle errors from service and propagate them",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","7","ItineraryController","createItinerary","","","","should create an itinerary and return a formatted response",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","TourService","searchTours","","","","should search tours with default parameters",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","sendVerification","","","","should throw BadRequestException if user does not exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","acceptItineraryInvitation","","","","should accept an itinerary invitation",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findContingencyById","","","","should throw NotFoundException if contingency plan not found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","MeilisearchService","calculateDaysCount","","","","should calculate days count from date range",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","publishItinerary","","","","should publish the itinerary if all checks pass",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","saveItinerary","","","","should pass errors from service to the caller",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","PaymentController","update","","","","should update a payment",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","8","ItineraryService","updateContingencyPlan","","","","should update a contingency plan successfully",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","duplicateContingency","","","","should duplicate an itinerary contingency",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","11","StaticService","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","searchItineraries","","","","should search itineraries with custom pagination",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","5","ProfileService","getListItineraries","","","","should return a list of itineraries for a user",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryService","findItinerariesByLatestTags","","","","should handle empty results when user has no itineraries or views",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","saveItinerary","","","","should save a public itinerary for the user and return success response",""
"passed","Mon May 19 09:47:13 GMT 2025","Mon May 19 09:47:13 GMT 2025","66","AuthService","login","","","","should throw UnauthorizedException if user is not found",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","TourService","searchTours","","","","should handle no filters correctly",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","updateItinerary","","","","should update an itinerary with defaults for deleted/missing fields",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","batchCheckUserSavedItinerary","","","","should still return even if user has not liked any itinerary on the list",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","NotificationService","update","","","","should throw NotFoundException if itinerary doesnt exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","6","ItineraryService","duplicateItinerary","","","","should throw ForbiddenException if user does not own the itinerary and the itinerary is not public",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","7","ItineraryService","getViewItinerary","","","","should return list of itinerary views ordered by viewedAt desc",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findItinerariesByLatestTags","","","","should return itineraries recommended based on user tags",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","NotificationController","removeAndCancel","","","","should remove an itinerary reminder and cancel the cron job",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","3","PreRegisterService","getPreRegisterCount","","","","should return total pre-registered users count",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","5","MeilisearchService","addOrUpdateTour","","","","should add a tour to the index",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","changePassword","","","","should successfully change password when all validations pass",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","7","ProfileService","getListItineraryLikes","","","","should correctly calculate totalDestinations when sections is empty",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","markAsComplete","","","","should throw ForbiddenException if user is not the owner",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","2","AuthService","verifyPasswordReset","","","","should throw UnauthorizedException if emails do not match",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","calculateDaysCount","","","","should handle string dates",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","getSearchSuggestions","","","","should handle duplicate titles in results",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","getViewItinerary","","","","should call service and return viewed itineraries",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findMyCompletedItineraries","","","","should return empty itinerary array if no completed itineraries found",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","18","MapService","getPlaceDetails","","","","should throw an error if placeId is not provided",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","findOne","","","","should handle user with no itineraries",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","34","ItineraryService","createItinerary","","","","should throw BadRequestException when date format is invalid",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","20","ItineraryController","searchItineraries","","","","should search itineraries with default parameters",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ProfileService","sendVerificationCode","","","","should throw BadRequestException if email is the same as current email",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","2","UmamiService","","","","","should log an error and return if UMAMI_DISCORD_WEBHOOK_URL is not set",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","createUser","","","","should throw BadRequestException if user was created recently and is not confirmed",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","9","AuthController","createUser","","","","should call authService.createUser and authService.sendVerification with correct data",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","NotificationService","_formatReminderOption","","","","should return ""tidak diketahui"" for unknown option",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","deleteTour","","","","should throw other errors",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","3","AuthService","verify","","","","should throw BadRequestException when ticket has expired",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","4","AuthService","verify","","","","should throw UnauthorizedException if firstNames do not match",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","createItinerary","","","","should create routes across multiple sections",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","27","ProfileService","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","findContingencyPlan","","","","should return a contingency plan with correctly mapped section numbers",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","createContingencyPlan","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","TourService","searchTours","","","","should search tours with filters and pagination",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findItinerariesByLatestTags","","","","should return empty array when no recommended itineraries are found",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ProfileService","_generateChangeEmailTicket","","","","should throw BadRequestException when requesting too soon",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","createContingency","","","","should create a contingency plan and return a formatted response",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","createViewItinerary","","","","should throw UnauthorizedException if user has no access to the itinerary",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","MeilisearchService","calculateDaysCount","","","","should handle time components correctly",""
"passed","Mon May 19 09:47:17 GMT 2025","Mon May 19 09:47:17 GMT 2025","14","UmamiService","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findAllMyItineraries","","","","should filter itineraries with shared=false and finished=false",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","33","MeilisearchService","","","","","should be defined",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","ProfileController","findOne","","","","should return a profile when findOne is called with a valid ID",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","createViewItinerary","","","","should call service and return response",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","12","GeminiController","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","removeUserFromItinerary","","","","should throw NotFoundException if the user to be removed is not a participant",""
"passed","Mon May 19 09:47:14 GMT 2025","Mon May 19 09:47:14 GMT 2025","7","AuthService","googleLogin","","","","should return access and refresh tokens if login is successful",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","_checkContingencyCount","","","","should throw BadRequestException when there are more than 2 contingency plans",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","removeItinerary","","","","should throw NotFoundException if itinerary does not exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","4","ItineraryService","createItinerary","","","","should throw BadRequestException when no sections are provided",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","searchItineraries","","","","should handle search with no results",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","4","RefreshStrategy","","","","","should extract refresh token from cookies",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","acceptItineraryInvitation","","","","should throw NotFoundException if the invitation does not exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","9","ItineraryController","inviteToItinerary","","","","should throw NotFoundException if the itinerary does not exist",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","sendVerificationCode","","","","should throw BadRequestException if email is already in use",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","PaymentService","findAll","","","","should return a string indicating all payments were returned",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","selectContingencyPlan","","","","should throw ForbiddenException when contingency plan belongs to different itinerary",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","searchItineraries","","","","should search itineraries with default parameters",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","StaticController","getCities","","","","should return list of cities",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","MeilisearchService","addOrUpdateItinerary","","","","should delete an unpublished itinerary from the index",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","updateContingency","","","","should update a contingency plan and return a formatted response",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ProfileService","_verifyChangeEmailTicket","","","","should throw UnauthorizedException when ticket does not belong to the user",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:17 GMT 2025","17","NotificationController","","","","","should be defined",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","MapService","getPriceRangeByPlaceId","","","","should throw an error if placeId is not provided",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryController","findOne","","","","should throw NotFoundException if itinerary is not found",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","2","PaymentController","remove","","","","should remove a payment",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","7","RefreshStrategy","","","","","should be defined",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","2","TourService","findOne","","","","should return tour with null itinerary if itinerary not found",""
"passed","Mon May 19 09:47:18 GMT 2025","Mon May 19 09:47:18 GMT 2025","3","StaticService","searchCities","","","","should return list of cities based on country",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","3","ProfileController","getListItineraries","","","","should return itineraries when getListItineraries is called with a valid ID",""
"passed","Mon May 19 09:47:16 GMT 2025","Mon May 19 09:47:16 GMT 2025","38","TourService","","","","","should be defined",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","2","ItineraryController","findAllTags","","","","should return all tags",""
"passed","Mon May 19 09:47:15 GMT 2025","Mon May 19 09:47:15 GMT 2025","3","ItineraryService","createItinerary","","","","should handle when section is not found in the created itinerary",""
